"use strict";exports.id=303,exports.ids=[303],exports.modules={23303:(R,C,s)=>{s.d(C,{fromIni:()=>b});var c=s(63738),d=s(10889);const m=(e,t,n)=>{const i={EcsContainer:async o=>{const{fromHttp:r}=await s.e(607).then(s.bind(s,46607)),{fromContainerMetadata:l}=await s.e(347).then(s.bind(s,69347));return n?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),(0,d.cy)(r(o??{}),l(o))},Ec2InstanceMetadata:async o=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:r}=await s.e(347).then(s.bind(s,69347));return r(o)},Environment:async o=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:r}=await Promise.resolve().then(s.bind(s,18974));return r(o)}};if(e in i)return i[e];throw new d.C1(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:n})},v=(e,{profile:t="default",logger:n}={})=>Boolean(e)&&typeof e=="object"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(h(e,{profile:t,logger:n})||P(e,{profile:t,logger:n})),h=(e,{profile:t,logger:n})=>{const i=typeof e.source_profile=="string"&&typeof e.credential_source>"u";return i&&n?.debug?.(`    ${t} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),i},P=(e,{profile:t,logger:n})=>{const i=typeof e.credential_source=="string"&&typeof e.source_profile>"u";return i&&n?.debug?.(`    ${t} isCredentialSourceProfile credential_source=${e.credential_source}`),i},w=async(e,t,n,i={})=>{n.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const o=t[e];if(!n.roleAssumer){const{getDefaultRoleAssumer:j}=await s.e(648).then(s.bind(s,26648));n.roleAssumer=j({...n.clientConfig,credentialProviderLogger:n.logger,parentClientConfig:n?.parentClientConfig},n.clientPlugins)}const{source_profile:r}=o;if(r&&r in i)throw new d.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,c.Bz)(n)}. Profiles visited: `+Object.keys(i).join(", "),{logger:n.logger});n.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${r?`source_profile=[${r}]`:`profile=[${e}]`}`);const l=r?g(r,{...t,[r]:{...t[r],role_arn:o.role_arn??t[r].role_arn}},n,{...i,[r]:!0}):(await m(o.credential_source,e,n.logger)(n))(),a={RoleArn:o.role_arn,RoleSessionName:o.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:o.external_id,DurationSeconds:parseInt(o.duration_seconds||"3600",10)},{mfa_serial:f}=o;if(f){if(!n.mfaCodeProvider)throw new d.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:n.logger,tryNextLink:!1});a.SerialNumber=f,a.TokenCode=await n.mfaCodeProvider(f)}const O=await l;return n.roleAssumer(O,a)},S=e=>Boolean(e)&&typeof e=="object"&&typeof e.credential_process=="string",I=async(e,t)=>s.e(419).then(s.bind(s,15419)).then(({fromProcess:n})=>n({...e,profile:t})()),A=async(e,t={})=>{const{fromSSO:n}=await s.e(379).then(s.bind(s,20379));return n({profile:e,logger:t.logger})()},x=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string"),u=e=>Boolean(e)&&typeof e=="object"&&typeof e.aws_access_key_id=="string"&&typeof e.aws_secret_access_key=="string"&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,y=(e,t)=>(t?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials"),Promise.resolve({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}})),$=e=>Boolean(e)&&typeof e=="object"&&typeof e.web_identity_token_file=="string"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,E=async(e,t)=>s.e(733).then(s.bind(s,29733)).then(({fromTokenFile:n})=>n({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity,logger:t.logger,parentClientConfig:t.parentClientConfig})()),g=async(e,t,n,i={})=>{const o=t[e];if(Object.keys(i).length>0&&u(o))return y(o,n);if(v(o,{profile:e,logger:n.logger}))return w(e,t,n,i);if(u(o))return y(o,n);if($(o))return E(o,n);if(S(o))return I(n,e);if(x(o))return await A(e,n);throw new d.C1(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:n.logger})},b=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const t=await(0,c.YU)(e);return g((0,c.Bz)(e),t,e)}}};
