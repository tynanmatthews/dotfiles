"use strict";exports.id=379,exports.ids=[379],exports.modules={20379:(ds,_e,d)=>{d.d(_e,{fromSSO:()=>hs});class R extends Error{constructor(s,t=!0){let o,n=!0;typeof t=="boolean"?(o=void 0,n=t):t!=null&&typeof t=="object"&&(o=t.logger,n=t.tryNextLink??!0),super(s),this.name="ProviderError",this.tryNextLink=n,Object.setPrototypeOf(this,R.prototype),o?.debug?.(`@smithy/property-provider ${n?"->":"(!)"} ${s}`)}static from(s,t=!0){return Object.assign(new this(s.message,t),s)}}class h extends R{constructor(s,t=!0){super(s,t),this.name="CredentialsProviderError",Object.setPrototypeOf(this,h.prototype)}}class Q extends R{constructor(s,t=!0){super(s,t),this.name="TokenProviderError",Object.setPrototypeOf(this,Q.prototype)}}const gs=(...e)=>async()=>{if(e.length===0)throw new ProviderError("No providers in chain");let s;for(const t of e)try{return await t()}catch(o){if(s=o,o?.tryNextLink)continue;throw o}throw s};var Y=d(70857),g=d(16928);const H={},we=()=>process&&process.geteuid?`${process.geteuid()}`:"DEFAULT",D=()=>{const{HOME:e,USERPROFILE:s,HOMEPATH:t,HOMEDRIVE:o=`C:${g.sep}`}=process.env;if(e)return e;if(s)return s;if(t)return`${o}${t}`;const n=we();return H[n]||(H[n]=(0,Y.homedir)()),H[n]},Ce="AWS_PROFILE",Oe="default",Ee=e=>e.profile||process.env[Ce]||Oe;var J=d(76982);const Fe=e=>{const t=(0,J.createHash)("sha1").update(e).digest("hex");return(0,g.join)(D(),".aws","sso","cache",`${t}.json`)};var k=d(79896);const{readFile:Te}=k.promises,ke=async e=>{const s=Fe(e),t=await Te(s,"utf8");return JSON.parse(t)};var X;(function(e){e.HEADER="header",e.QUERY="query"})(X||(X={}));var B;(function(e){e.HEADER="header",e.QUERY="query"})(B||(B={}));var z;(function(e){e.HTTP="http",e.HTTPS="https"})(z||(z={}));var A;(function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"})(A||(A={}));const ps=e=>{const s=[];return e.sha256!==void 0&&s.push({algorithmId:()=>A.SHA256,checksumConstructor:()=>e.sha256}),e.md5!=null&&s.push({algorithmId:()=>A.MD5,checksumConstructor:()=>e.md5}),{_checksumAlgorithms:s,addChecksumAlgorithm(t){this._checksumAlgorithms.push(t)},checksumAlgorithms(){return this._checksumAlgorithms}}},Ss=e=>{const s={};return e.checksumAlgorithms().forEach(t=>{s[t.algorithmId()]=t.checksumConstructor()}),s},ms=e=>({...getChecksumConfiguration(e)}),_s=e=>({...resolveChecksumRuntimeConfig(e)});var Z;(function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"})(Z||(Z={}));var C;(function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"})(C||(C={}));var q;(function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"})(q||(q={}));const ye=e=>Object.entries(e).filter(([s])=>{const t=s.indexOf(O);return t===-1?!1:Object.values(C).includes(s.substring(0,t))}).reduce((s,[t,o])=>{const n=t.indexOf(O),r=t.substring(0,n)===C.PROFILE?t.substring(n+1):t;return s[r]=o,s},{...e.default&&{default:e.default}}),xe="AWS_CONFIG_FILE",ee=()=>process.env[xe]||(0,g.join)(D(),".aws","config"),ve="AWS_SHARED_CREDENTIALS_FILE",Re=()=>process.env[ve]||(0,g.join)(D(),".aws","credentials"),De=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,Ae=["__proto__","profile __proto__"],b=e=>{const s={};let t,o;for(const n of e.split(/\r?\n/)){const r=n.split(/(^|\s)[;#]/)[0].trim();if(r[0]==="["&&r[r.length-1]==="]"){t=void 0,o=void 0;const c=r.substring(1,r.length-1),a=De.exec(c);if(a){const[,i,,u]=a;Object.values(C).includes(i)&&(t=[i,u].join(O))}else t=c;if(Ae.includes(c))throw new Error(`Found invalid profile name "${c}"`)}else if(t){const c=r.indexOf("=");if(![0,-1].includes(c)){const[a,i]=[r.substring(0,c).trim(),r.substring(c+1).trim()];if(i==="")o=a;else{o&&n.trimStart()===n&&(o=void 0),s[t]=s[t]||{};const u=o?[o,a].join(O):a;s[t][u]=i}}}}return s},{readFile:Ie}=k.promises,j={},$=(e,s)=>((!j[e]||s?.ignoreCache)&&(j[e]=Ie(e,"utf8")),j[e]),se=()=>({}),O=".",Ne=async(e={})=>{const{filepath:s=Re(),configFilepath:t=ee()}=e,o=D(),n="~/";let r=s;s.startsWith(n)&&(r=(0,g.join)(o,s.slice(2)));let l=t;t.startsWith(n)&&(l=(0,g.join)(o,t.slice(2)));const c=await Promise.all([$(l,{ignoreCache:e.ignoreCache}).then(b).then(ye).catch(se),$(r,{ignoreCache:e.ignoreCache}).then(b).catch(se)]);return{configFile:c[0],credentialsFile:c[1]}},Pe=e=>Object.entries(e).filter(([s])=>s.startsWith(C.SSO_SESSION+O)).reduce((s,[t,o])=>({...s,[t.substring(t.indexOf(O)+1)]:o}),{}),Le=()=>({}),He=async(e={})=>$(e.configFilepath??ee()).then(b).then(Pe).catch(Le),be=(...e)=>{const s={};for(const t of e)for(const[o,n]of Object.entries(t))s[o]!==void 0?Object.assign(s[o],n):s[o]=n;return s},je=async e=>{const s=await Ne(e);return be(s.configFile,s.credentialsFile)},$e=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string");class I extends Error{constructor(s,t=!0){let o,n=!0;typeof t=="boolean"?(o=void 0,n=t):t!=null&&typeof t=="object"&&(o=t.logger,n=t.tryNextLink??!0),super(s),this.name="ProviderError",this.tryNextLink=n,Object.setPrototypeOf(this,I.prototype),o?.debug?.(`@smithy/property-provider ${n?"->":"(!)"} ${s}`)}static from(s,t=!0){return Object.assign(new this(s.message,t),s)}}class te extends I{constructor(s,t=!0){super(s,t),this.name="CredentialsProviderError",Object.setPrototypeOf(this,te.prototype)}}class S extends I{constructor(s,t=!0){super(s,t),this.name="TokenProviderError",Object.setPrototypeOf(this,S.prototype)}}const ws=(...e)=>async()=>{if(e.length===0)throw new ProviderError("No providers in chain");let s;for(const t of e)try{return await t()}catch(o){if(s=o,o?.tryNextLink)continue;throw o}throw s},K={},Ke=()=>process&&process.geteuid?`${process.geteuid()}`:"DEFAULT",N=()=>{const{HOME:e,USERPROFILE:s,HOMEPATH:t,HOMEDRIVE:o=`C:${g.sep}`}=process.env;if(e)return e;if(s)return s;if(t)return`${o}${t}`;const n=Ke();return K[n]||(K[n]=(0,Y.homedir)()),K[n]},Ue="AWS_PROFILE",Me="default",We=e=>e.profile||process.env[Ue]||Me,oe=e=>{const t=(0,J.createHash)("sha1").update(e).digest("hex");return(0,g.join)(N(),".aws","sso","cache",`${t}.json`)},{readFile:Ve}=k.promises,Ge=async e=>{const s=oe(e),t=await Ve(s,"utf8");return JSON.parse(t)};var ne;(function(e){e.HEADER="header",e.QUERY="query"})(ne||(ne={}));var re;(function(e){e.HEADER="header",e.QUERY="query"})(re||(re={}));var ie;(function(e){e.HTTP="http",e.HTTPS="https"})(ie||(ie={}));var P;(function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"})(P||(P={}));const Cs=e=>{const s=[];return e.sha256!==void 0&&s.push({algorithmId:()=>P.SHA256,checksumConstructor:()=>e.sha256}),e.md5!=null&&s.push({algorithmId:()=>P.MD5,checksumConstructor:()=>e.md5}),{_checksumAlgorithms:s,addChecksumAlgorithm(t){this._checksumAlgorithms.push(t)},checksumAlgorithms(){return this._checksumAlgorithms}}},Os=e=>{const s={};return e.checksumAlgorithms().forEach(t=>{s[t.algorithmId()]=t.checksumConstructor()}),s},Es=e=>({...getChecksumConfiguration(e)}),Fs=e=>({...resolveChecksumRuntimeConfig(e)});var ce;(function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"})(ce||(ce={}));var E;(function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"})(E||(E={}));var ae;(function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"})(ae||(ae={}));const Qe=e=>Object.entries(e).filter(([s])=>{const t=s.indexOf(F);return t===-1?!1:Object.values(E).includes(s.substring(0,t))}).reduce((s,[t,o])=>{const n=t.indexOf(F),r=t.substring(0,n)===E.PROFILE?t.substring(n+1):t;return s[r]=o,s},{...e.default&&{default:e.default}}),Ye="AWS_CONFIG_FILE",le=()=>process.env[Ye]||(0,g.join)(N(),".aws","config"),Je="AWS_SHARED_CREDENTIALS_FILE",Xe=()=>process.env[Je]||(0,g.join)(N(),".aws","credentials"),Be=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,ze=["__proto__","profile __proto__"],U=e=>{const s={};let t,o;for(const n of e.split(/\r?\n/)){const r=n.split(/(^|\s)[;#]/)[0].trim();if(r[0]==="["&&r[r.length-1]==="]"){t=void 0,o=void 0;const c=r.substring(1,r.length-1),a=Be.exec(c);if(a){const[,i,,u]=a;Object.values(E).includes(i)&&(t=[i,u].join(F))}else t=c;if(ze.includes(c))throw new Error(`Found invalid profile name "${c}"`)}else if(t){const c=r.indexOf("=");if(![0,-1].includes(c)){const[a,i]=[r.substring(0,c).trim(),r.substring(c+1).trim()];if(i==="")o=a;else{o&&n.trimStart()===n&&(o=void 0),s[t]=s[t]||{};const u=o?[o,a].join(F):a;s[t][u]=i}}}}return s},{readFile:Ze}=k.promises,M={},W=(e,s)=>((!M[e]||s?.ignoreCache)&&(M[e]=Ze(e,"utf8")),M[e]),fe=()=>({}),F=".",qe=async(e={})=>{const{filepath:s=Xe(),configFilepath:t=le()}=e,o=N(),n="~/";let r=s;s.startsWith(n)&&(r=(0,g.join)(o,s.slice(2)));let l=t;t.startsWith(n)&&(l=(0,g.join)(o,t.slice(2)));const c=await Promise.all([W(l,{ignoreCache:e.ignoreCache}).then(U).then(Qe).catch(fe),W(r,{ignoreCache:e.ignoreCache}).then(U).catch(fe)]);return{configFile:c[0],credentialsFile:c[1]}},es=e=>Object.entries(e).filter(([s])=>s.startsWith(E.SSO_SESSION+F)).reduce((s,[t,o])=>({...s,[t.substring(t.indexOf(F)+1)]:o}),{}),ss=()=>({}),ts=async(e={})=>W(e.configFilepath??le()).then(U).then(es).catch(ss),os=(...e)=>{const s={};for(const t of e)for(const[o,n]of Object.entries(t))s[o]!==void 0?Object.assign(s[o],n):s[o]=n;return s},ns=async e=>{const s=await qe(e);return os(s.configFile,s.credentialsFile)},rs=5*60*1e3,V="To refresh this SSO session run 'aws sso login' with the corresponding profile.",G={},is=async e=>{const{SSOOIDCClient:s}=await Promise.resolve().then(d.bind(d,53840));if(G[e])return G[e];const t=new s({region:e});return G[e]=t,t},cs=async(e,s)=>{const{CreateTokenCommand:t}=await Promise.resolve().then(d.bind(d,53840));return(await is(s)).send(new t({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},ue=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new S(`Token is expired. ${V}`,!1)},m=(e,s,t=!1)=>{if(typeof s>"u")throw new S(`Value not present for '${e}' in SSO Token${t?". Cannot refresh":""}. ${V}`,!1)},{writeFile:as}=k.promises,ls=(e,s)=>{const t=oe(e),o=JSON.stringify(s,null,2);return as(t,o)},he=new Date(0),fs=(e={})=>async()=>{e.logger?.debug("@aws-sdk/token-providers - fromSso");const s=await ns(e),t=We(e),o=s[t];if(o){if(!o.sso_session)throw new S(`Profile '${t}' is missing required property 'sso_session'.`)}else throw new S(`Profile '${t}' could not be found in shared credentials file.`,!1);const n=o.sso_session,l=(await ts(e))[n];if(!l)throw new S(`Sso session '${n}' could not be found in shared credentials file.`,!1);for(const f of["sso_start_url","sso_region"])if(!l[f])throw new S(`Sso session '${n}' is missing required property '${f}'.`,!1);const c=l.sso_start_url,a=l.sso_region;let i;try{i=await Ge(n)}catch{throw new S(`The SSO session token associated with profile=${t} was not found or is invalid. ${V}`,!1)}m("accessToken",i.accessToken),m("expiresAt",i.expiresAt);const{accessToken:u,expiresAt:x}=i,p={token:u,expiration:new Date(x)};if(p.expiration.getTime()-Date.now()>rs)return p;if(Date.now()-he.getTime()<30*1e3)return ue(p),p;m("clientId",i.clientId,!0),m("clientSecret",i.clientSecret,!0),m("refreshToken",i.refreshToken,!0);try{he.setTime(Date.now());const f=await cs(i,a);m("accessToken",f.accessToken),m("expiresIn",f.expiresIn);const T=new Date(Date.now()+f.expiresIn*1e3);try{await ls(n,{...i,accessToken:f.accessToken,expiresAt:T.toISOString(),refreshToken:f.refreshToken})}catch{}return{token:f.accessToken,expiration:T}}catch{return ue(p),p}},y=!1,de=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:t,ssoRegion:o,ssoRoleName:n,ssoClient:r,clientConfig:l,profile:c,logger:a})=>{let i;const u="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const w=await fs({profile:c})();i={accessToken:w.token,expiresAt:new Date(w.expiration).toISOString()}}catch(w){throw new h(w.message,{tryNextLink:y,logger:a})}else try{i=await ke(e)}catch{throw new h(`The SSO session associated with this profile is invalid. ${u}`,{tryNextLink:y,logger:a})}if(new Date(i.expiresAt).getTime()-Date.now()<=0)throw new h(`The SSO session associated with this profile has expired. ${u}`,{tryNextLink:y,logger:a});const{accessToken:x}=i,{SSOClient:p,GetRoleCredentialsCommand:f}=await d.e(569).then(d.bind(d,68569)),T=r||new p(Object.assign({},l??{},{region:l?.region??o}));let L;try{L=await T.send(new f({accountId:t,roleName:n,accessToken:x}))}catch(w){throw new h(w,{tryNextLink:y,logger:a})}const{roleCredentials:{accessKeyId:_,secretAccessKey:v,sessionToken:ge,expiration:pe,credentialScope:Se,accountId:me}={}}=L;if(!_||!v||!ge||!pe)throw new h("SSO returns an invalid temporary credential.",{tryNextLink:y,logger:a});return{accessKeyId:_,secretAccessKey:v,sessionToken:ge,expiration:new Date(pe),...Se&&{credentialScope:Se},...me&&{accountId:me}}},us=(e,s)=>{const{sso_start_url:t,sso_account_id:o,sso_region:n,sso_role_name:r}=e;if(!t||!o||!n||!r)throw new h(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e},hs=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:s,ssoAccountId:t,ssoRegion:o,ssoRoleName:n,ssoSession:r}=e,{ssoClient:l}=e,c=Ee(e);if(!s&&!t&&!o&&!n&&!r){const i=(await je(e))[c];if(!i)throw new h(`Profile ${c} was not found.`,{logger:e.logger});if(!$e(i))throw new h(`Profile ${c} is not configured with SSO credentials.`,{logger:e.logger});if(i?.sso_session){const _=(await He(e))[i.sso_session],v=` configurations in profile ${c} and sso-session ${i.sso_session}`;if(o&&o!==_.sso_region)throw new h("Conflicting SSO region"+v,{tryNextLink:!1,logger:e.logger});if(s&&s!==_.sso_start_url)throw new h("Conflicting SSO start_url"+v,{tryNextLink:!1,logger:e.logger});i.sso_region=_.sso_region,i.sso_start_url=_.sso_start_url}const{sso_start_url:u,sso_account_id:x,sso_region:p,sso_role_name:f,sso_session:T}=us(i,e.logger);return de({ssoStartUrl:u,ssoSession:T,ssoAccountId:x,ssoRegion:p,ssoRoleName:f,ssoClient:l,clientConfig:e.clientConfig,profile:c})}else{if(!s||!t||!o||!n)throw new h('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger});return de({ssoStartUrl:s,ssoSession:r,ssoAccountId:t,ssoRegion:o,ssoRoleName:n,ssoClient:l,clientConfig:e.clientConfig,profile:c})}}}};
