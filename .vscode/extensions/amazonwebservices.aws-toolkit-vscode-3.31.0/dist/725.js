"use strict";exports.id=725,exports.ids=[725],exports.modules={24725:(B,J,a)=>{a.d(J,{fromSSO:()=>Y});var n=a(35406),d=a(82712);const P=s=>s&&(typeof s.sso_start_url=="string"||typeof s.sso_account_id=="string"||typeof s.sso_session=="string"||typeof s.sso_region=="string"||typeof s.sso_role_name=="string");var A=a(8818);const U=5*60*1e3,x="To refresh this SSO session run 'aws sso login' with the corresponding profile.",I={},F=async s=>{const{SSOOIDCClient:t}=await a.e(848).then(a.bind(a,55848));if(I[s])return I[s];const o=new t({region:s});return I[s]=o,o},G=async(s,t)=>{const{CreateTokenCommand:o}=await a.e(848).then(a.bind(a,55848));return(await F(t)).send(new o({clientId:s.clientId,clientSecret:s.clientSecret,refreshToken:s.refreshToken,grantType:"refresh_token"}))},D=s=>{if(s.expiration&&s.expiration.getTime()<Date.now())throw new n.Jh(`Token is expired. ${x}`,!1)},h=(s,t,o=!1)=>{if(typeof t>"u")throw new n.Jh(`Value not present for '${s}' in SSO Token${o?". Cannot refresh":""}. ${x}`,!1)};var H=a(79896);const{writeFile:K}=H.promises,M=(s,t)=>{const o=(0,d.C9)(s),r=JSON.stringify(t,null,2);return K(o,r)},$=new Date(0),j=(s={})=>async()=>{s.logger?.debug("@aws-sdk/token-providers - fromSso");const t=await(0,d.YU)(s),o=(0,d.Bz)(s),r=t[o];if(r){if(!r.sso_session)throw new n.Jh(`Profile '${o}' is missing required property 'sso_session'.`)}else throw new n.Jh(`Profile '${o}' could not be found in shared credentials file.`,!1);const c=r.sso_session,l=(await(0,d.qw)(s))[c];if(!l)throw new n.Jh(`Sso session '${c}' could not be found in shared credentials file.`,!1);for(const i of["sso_start_url","sso_region"])if(!l[i])throw new n.Jh(`Sso session '${c}' is missing required property '${i}'.`,!1);const S=l.sso_start_url,w=l.sso_region;let e;try{e=await(0,d.vf)(c)}catch{throw new n.Jh(`The SSO session token associated with profile=${o} was not found or is invalid. ${x}`,!1)}h("accessToken",e.accessToken),h("expiresAt",e.expiresAt);const{accessToken:T,expiresAt:y}=e,f={token:T,expiration:new Date(y)};if(f.expiration.getTime()-Date.now()>U)return f;if(Date.now()-$.getTime()<30*1e3)return D(f),f;h("clientId",e.clientId,!0),h("clientSecret",e.clientSecret,!0),h("refreshToken",e.refreshToken,!0);try{$.setTime(Date.now());const i=await G(e,w);h("accessToken",i.accessToken),h("expiresIn",i.expiresIn);const m=new Date(Date.now()+i.expiresIn*1e3);try{await M(c,{...e,accessToken:i.accessToken,expiresAt:m.toISOString(),refreshToken:i.refreshToken})}catch{}return{token:i.accessToken,expiration:m}}catch{return D(f),f}},C=!1,v=async({ssoStartUrl:s,ssoSession:t,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoClient:g,clientConfig:l,profile:S,logger:w})=>{let e;const T="To refresh this SSO session run aws sso login with the corresponding profile.";if(t)try{const p=await j({profile:S})();e={accessToken:p.token,expiresAt:new Date(p.expiration).toISOString()}}catch(p){throw new n.C1(p.message,{tryNextLink:C,logger:w})}else try{e=await(0,d.vf)(s)}catch{throw new n.C1(`The SSO session associated with this profile is invalid. ${T}`,{tryNextLink:C,logger:w})}if(new Date(e.expiresAt).getTime()-Date.now()<=0)throw new n.C1(`The SSO session associated with this profile has expired. ${T}`,{tryNextLink:C,logger:w});const{accessToken:y}=e,{SSOClient:f,GetRoleCredentialsCommand:i}=await a.e(809).then(a.bind(a,8809)),m=g||new f(Object.assign({},l??{},{region:l?.region??r}));let k;try{k=await m.send(new i({accountId:o,roleName:c,accessToken:y}))}catch(p){throw new n.C1(p,{tryNextLink:C,logger:w})}const{roleCredentials:{accessKeyId:u,secretAccessKey:O,sessionToken:R,expiration:E,credentialScope:L,accountId:_}={}}=k;if(!u||!O||!R||!E)throw new n.C1("SSO returns an invalid temporary credential.",{tryNextLink:C,logger:w});const N={accessKeyId:u,secretAccessKey:O,sessionToken:R,expiration:new Date(E),...L&&{credentialScope:L},..._&&{accountId:_}};return t?(0,A.g)(N,"CREDENTIALS_SSO","s"):(0,A.g)(N,"CREDENTIALS_SSO_LEGACY","u"),N},z=(s,t)=>{const{sso_start_url:o,sso_account_id:r,sso_region:c,sso_role_name:g}=s;if(!o||!r||!c||!g)throw new n.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(s).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:t});return s},Y=(s={})=>async()=>{s.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:t,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoSession:g}=s,{ssoClient:l}=s,S=(0,d.Bz)(s);if(!t&&!o&&!r&&!c&&!g){const e=(await(0,d.YU)(s))[S];if(!e)throw new n.C1(`Profile ${S} was not found.`,{logger:s.logger});if(!P(e))throw new n.C1(`Profile ${S} is not configured with SSO credentials.`,{logger:s.logger});if(e?.sso_session){const u=(await(0,d.qw)(s))[e.sso_session],O=` configurations in profile ${S} and sso-session ${e.sso_session}`;if(r&&r!==u.sso_region)throw new n.C1("Conflicting SSO region"+O,{tryNextLink:!1,logger:s.logger});if(t&&t!==u.sso_start_url)throw new n.C1("Conflicting SSO start_url"+O,{tryNextLink:!1,logger:s.logger});e.sso_region=u.sso_region,e.sso_start_url=u.sso_start_url}const{sso_start_url:T,sso_account_id:y,sso_region:f,sso_role_name:i,sso_session:m}=z(e,s.logger);return v({ssoStartUrl:T,ssoSession:m,ssoAccountId:y,ssoRegion:f,ssoRoleName:i,ssoClient:l,clientConfig:s.clientConfig,profile:S})}else{if(!t||!o||!r||!c)throw new n.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:s.logger});return v({ssoStartUrl:t,ssoSession:g,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoClient:l,clientConfig:s.clientConfig,profile:S})}}}};
