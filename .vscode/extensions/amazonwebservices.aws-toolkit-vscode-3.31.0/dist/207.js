"use strict";exports.id=207,exports.ids=[207],exports.modules={85207:(h,l,s)=>{s.r(l),s.d(l,{fromProcess:()=>S});var u=s(82712),i=s(35406),x=s(35317),P=s(39023),w=s(8818);const f=(r,e,n)=>{if(e.Version!==1)throw Error(`Profile ${r} credential_process did not return Version 1.`);if(e.AccessKeyId===void 0||e.SecretAccessKey===void 0)throw Error(`Profile ${r} credential_process returned invalid credentials.`);if(e.Expiration){const d=new Date;if(new Date(e.Expiration)<d)throw Error(`Profile ${r} credential_process returned expired credentials.`)}let o=e.AccountId;!o&&n?.[r]?.aws_account_id&&(o=n[r].aws_account_id);const t={accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,...e.SessionToken&&{sessionToken:e.SessionToken},...e.Expiration&&{expiration:new Date(e.Expiration)},...e.CredentialScope&&{credentialScope:e.CredentialScope},...o&&{accountId:o}};return(0,w.g)(t,"CREDENTIALS_PROCESS","w"),t},y=async(r,e,n)=>{const o=e[r];if(e[r]){const t=o.credential_process;if(t!==void 0){const d=(0,P.promisify)(x.exec);try{const{stdout:c}=await d(t);let a;try{a=JSON.parse(c.trim())}catch{throw Error(`Profile ${r} credential_process returned invalid JSON.`)}return f(r,a,e)}catch(c){throw new i.C1(c.message,{logger:n})}}else throw new i.C1(`Profile ${r} did not contain credential_process.`,{logger:n})}else throw new i.C1(`Profile ${r} could not be found in shared credentials file.`,{logger:n})},S=(r={})=>async()=>{r.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");const e=await(0,u.YU)(r);return y((0,u.Bz)(r),e,r.logger)}}};
