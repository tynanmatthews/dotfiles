"use strict";exports.id=347,exports.ids=[347],exports.modules={69347:(nt,te,h)=>{h.d(te,{ENV_CMDS_FULL_URI:()=>C,ENV_CMDS_RELATIVE_URI:()=>T,fromContainerMetadata:()=>fe,fromInstanceMetadata:()=>Je,getInstanceMetadataEndpoint:()=>J,httpRequest:()=>_});class p extends Error{constructor(t,n=!0){let o,r=!0;typeof n=="boolean"?(o=void 0,r=n):n!=null&&typeof n=="object"&&(o=n.logger,r=n.tryNextLink??!0),super(t),this.name="ProviderError",this.tryNextLink=r,Object.setPrototypeOf(this,p.prototype),o?.debug?.(`@smithy/property-provider ${r?"->":"(!)"} ${t}`)}static from(t,n=!0){return Object.assign(new this(t.message,n),t)}}class f extends p{constructor(t,n=!0){super(t,n),this.name="CredentialsProviderError",Object.setPrototypeOf(this,f.prototype)}}class b extends p{constructor(t,n=!0){super(t,n),this.name="TokenProviderError",Object.setPrototypeOf(this,b.prototype)}}const ne=(...e)=>async()=>{if(e.length===0)throw new p("No providers in chain");let t;for(const n of e)try{return await n()}catch(o){if(t=o,o?.tryNextLink)continue;throw o}throw t},oe=e=>()=>Promise.resolve(e),re=(e,t,n)=>{let o,r,s,i=!1;const a=async()=>{r||(r=e());try{o=await r,s=!0,i=!1}finally{r=void 0}return o};return t===void 0?async c=>((!s||c?.forceRefresh)&&(o=await a()),o):async c=>((!s||c?.forceRefresh)&&(o=await a()),i?o:n&&!n(o)?(i=!0,o):(t(o)&&await a(),o))};var se=h(87016),ae=h(20181),ie=h(58611);function _(e){return new Promise((t,n)=>{const o=(0,ie.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});o.on("error",r=>{n(Object.assign(new p("Unable to connect to instance metadata service"),r)),o.destroy()}),o.on("timeout",()=>{n(new p("TimeoutError from instance metadata service")),o.destroy()}),o.on("response",r=>{const{statusCode:s=400}=r;(s<200||300<=s)&&(n(Object.assign(new p("Error response received from instance metadata service"),{statusCode:s})),o.destroy());const i=[];r.on("data",a=>{i.push(a)}),r.on("end",()=>{t(ae.Buffer.concat(i)),o.destroy()})}),o.end()})}const M=e=>Boolean(e)&&typeof e=="object"&&typeof e.AccessKeyId=="string"&&typeof e.SecretAccessKey=="string"&&typeof e.Token=="string"&&typeof e.Expiration=="string",L=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration),...e.AccountId&&{accountId:e.AccountId}}),ce=1e3,le=0,k=({maxRetries:e=le,timeout:t=ce})=>({maxRetries:e,timeout:t}),N=(e,t)=>{let n=e();for(let o=0;o<t;o++)n=n.catch(e);return n},C="AWS_CONTAINER_CREDENTIALS_FULL_URI",T="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",V="AWS_CONTAINER_AUTHORIZATION_TOKEN",fe=(e={})=>{const{timeout:t,maxRetries:n}=k(e);return()=>N(async()=>{const o=await me({logger:e.logger}),r=JSON.parse(await de(t,o));if(!M(r))throw new f("Invalid response received from instance metadata service.",{logger:e.logger});return L(r)},n)},de=async(e,t)=>(process.env[V]&&(t.headers={...t.headers,Authorization:process.env[V]}),(await _({...t,timeout:e})).toString()),ue="169.254.170.2",he={localhost:!0,"127.0.0.1":!0},pe={"http:":!0,"https:":!0},me=async({logger:e})=>{if(process.env[T])return{hostname:ue,path:process.env[T]};if(process.env[C]){const t=(0,se.parse)(process.env[C]);if(!t.hostname||!(t.hostname in he))throw new f(`${t.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:e});if(!t.protocol||!(t.protocol in pe))throw new f(`${t.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:e});return{...t,port:t.port?parseInt(t.port,10):void 0}}throw new f(`The container metadata credential provider cannot be used unless the ${T} or ${C} environment variable is set`,{tryNextLink:!1,logger:e})};function H(e){try{const t=new Set(Array.from(e.match(/([A-Z_]){3,}/g)??[]));return t.delete("CONFIG"),t.delete("CONFIG_PREFIX_SEPARATOR"),t.delete("ENV"),[...t].join(", ")}catch{return e}}const Ee=(e,t)=>async()=>{try{const n=e(process.env);if(n===void 0)throw new Error;return n}catch(n){throw new f(n.message||`Not found in ENV: ${H(e.toString())}`,{logger:t})}};var ge=h(70857),I=h(16928);const w={},Se=()=>process&&process.geteuid?`${process.geteuid()}`:"DEFAULT",y=()=>{const{HOME:e,USERPROFILE:t,HOMEPATH:n,HOMEDRIVE:o=`C:${I.sep}`}=process.env;if(e)return e;if(t)return t;if(n)return`${o}${n}`;const r=Se();return w[r]||(w[r]=(0,ge.homedir)()),w[r]},_e="AWS_PROFILE",Ie="default",Ae=e=>e.profile||process.env[_e]||Ie;var ot=h(76982);const rt=e=>{const n=createHash("sha1").update(e).digest("hex");return join(getHomeDir(),".aws","sso","cache",`${n}.json`)};var U=h(79896);const{readFile:Ce}=U.promises,st=async e=>{const t=getSSOTokenFilepath(e),n=await Ce(t,"utf8");return JSON.parse(n)};var $;(function(e){e.HEADER="header",e.QUERY="query"})($||($={}));var j;(function(e){e.HEADER="header",e.QUERY="query"})(j||(j={}));var W;(function(e){e.HTTP="http",e.HTTPS="https"})(W||(W={}));var v;(function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"})(v||(v={}));const at=e=>{const t=[];return e.sha256!==void 0&&t.push({algorithmId:()=>v.SHA256,checksumConstructor:()=>e.sha256}),e.md5!=null&&t.push({algorithmId:()=>v.MD5,checksumConstructor:()=>e.md5}),{_checksumAlgorithms:t,addChecksumAlgorithm(n){this._checksumAlgorithms.push(n)},checksumAlgorithms(){return this._checksumAlgorithms}}},it=e=>{const t={};return e.checksumAlgorithms().forEach(n=>{t[n.algorithmId()]=n.checksumConstructor()}),t},ct=e=>({...getChecksumConfiguration(e)}),lt=e=>({...resolveChecksumRuntimeConfig(e)});var K;(function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"})(K||(K={}));var A;(function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"})(A||(A={}));var G;(function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"})(G||(G={}));const Te=e=>Object.entries(e).filter(([t])=>{const n=t.indexOf(O);return n===-1?!1:Object.values(A).includes(t.substring(0,n))}).reduce((t,[n,o])=>{const r=n.indexOf(O),s=n.substring(0,r)===A.PROFILE?n.substring(r+1):n;return t[s]=o,t},{...e.default&&{default:e.default}}),ve="AWS_CONFIG_FILE",Oe=()=>process.env[ve]||(0,I.join)(y(),".aws","config"),Fe="AWS_SHARED_CREDENTIALS_FILE",Ne=()=>process.env[Fe]||(0,I.join)(y(),".aws","credentials"),we=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,ye=["__proto__","profile __proto__"],B=e=>{const t={};let n,o;for(const r of e.split(/\r?\n/)){const s=r.split(/(^|\s)[;#]/)[0].trim();if(s[0]==="["&&s[s.length-1]==="]"){n=void 0,o=void 0;const a=s.substring(1,s.length-1),c=we.exec(a);if(c){const[,l,,m]=c;Object.values(A).includes(l)&&(n=[l,m].join(O))}else n=a;if(ye.includes(a))throw new Error(`Found invalid profile name "${a}"`)}else if(n){const a=s.indexOf("=");if(![0,-1].includes(a)){const[c,l]=[s.substring(0,a).trim(),s.substring(a+1).trim()];if(l==="")o=c;else{o&&r.trimStart()===r&&(o=void 0),t[n]=t[n]||{};const m=o?[o,c].join(O):c;t[n][m]=l}}}}return t},{readFile:Re}=U.promises,R={},X=(e,t)=>((!R[e]||t?.ignoreCache)&&(R[e]=Re(e,"utf8")),R[e]),Y=()=>({}),O=".",De=async(e={})=>{const{filepath:t=Ne(),configFilepath:n=Oe()}=e,o=y(),r="~/";let s=t;t.startsWith(r)&&(s=(0,I.join)(o,t.slice(2)));let i=n;n.startsWith(r)&&(i=(0,I.join)(o,n.slice(2)));const a=await Promise.all([X(i,{ignoreCache:e.ignoreCache}).then(B).then(Te).catch(Y),X(s,{ignoreCache:e.ignoreCache}).then(B).catch(Y)]);return{configFile:a[0],credentialsFile:a[1]}},ft=e=>Object.entries(e).filter(([t])=>t.startsWith(IniSectionType.SSO_SESSION+CONFIG_PREFIX_SEPARATOR)).reduce((t,[n,o])=>({...t,[n.substring(n.indexOf(CONFIG_PREFIX_SEPARATOR)+1)]:o}),{}),Pe=()=>({}),dt=async(e={})=>slurpFile(e.configFilepath??getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(Pe),ut=async e=>{const t=await loadSharedConfigFiles(e);return mergeConfigFiles(t.configFile,t.credentialsFile)},xe=(e,{preferredFile:t="config",...n}={})=>async()=>{const o=Ae(n),{configFile:r,credentialsFile:s}=await De(n),i=s[o]||{},a=r[o]||{},c=t==="config"?{...i,...a}:{...a,...i};try{const m=e(c,t==="config"?r:s);if(m===void 0)throw new Error;return m}catch(l){throw new f(l.message||`Not found in config files w/ profile [${o}]: ${H(e.toString())}`,{logger:n.logger})}},be=e=>typeof e=="function",Me=e=>be(e)?async()=>await e():oe(e),D=({environmentVariableSelector:e,configFileSelector:t,default:n},o={})=>re(ne(Ee(e),xe(t,o),Me(n)));class P extends f{constructor(t,n=!0){super(t,n),this.tryNextLink=n,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,P.prototype)}}function Le(e){const t={};if(e=e.replace(/^\?/,""),e)for(const n of e.split("&")){let[o,r=null]=n.split("=");o=decodeURIComponent(o),r&&(r=decodeURIComponent(r)),o in t?Array.isArray(t[o])?t[o].push(r):t[o]=[t[o],r]:t[o]=r}return t}const z=e=>{if(typeof e=="string")return z(new URL(e));const{hostname:t,pathname:n,port:o,protocol:r,search:s}=e;let i;return s&&(i=Le(s)),{hostname:t,port:o?parseInt(o):void 0,protocol:r,path:n,query:i}};var F;(function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"})(F||(F={}));const ke="AWS_EC2_METADATA_SERVICE_ENDPOINT",Ve="ec2_metadata_service_endpoint",He={environmentVariableSelector:e=>e[ke],configFileSelector:e=>e[Ve],default:void 0};var g;(function(e){e.IPv4="IPv4",e.IPv6="IPv6"})(g||(g={}));const Ue="AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE",$e="ec2_metadata_service_endpoint_mode",je={environmentVariableSelector:e=>e[Ue],configFileSelector:e=>e[$e],default:g.IPv4},J=async()=>z(await We()||await Ke()),We=async()=>D(He)(),Ke=async()=>{const e=await D(je)();switch(e){case g.IPv4:return F.IPv4;case g.IPv6:return F.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(g)}`)}},Ge=5*60,Be=5*60,Xe="https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html",Q=(e,t)=>{const n=Ge+Math.floor(Math.random()*Be),o=new Date(Date.now()+n*1e3);t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(o)}.
For more information, please visit: `+Xe);const r=e.originalExpiration??e.expiration;return{...e,...r?{originalExpiration:r}:{},expiration:o}},Ye=(e,t={})=>{const n=t?.logger||console;let o;return async()=>{let r;try{r=await e(),r.expiration&&r.expiration.getTime()<Date.now()&&(r=Q(r,n))}catch(s){if(o)n.warn("Credential renew failed: ",s),r=Q(o,n);else throw s}return o=r,r}},Z="/latest/meta-data/iam/security-credentials/",ze="/latest/api/token",x="AWS_EC2_METADATA_V1_DISABLED",q="ec2_metadata_v1_disabled",ee="x-aws-ec2-metadata-token",Je=(e={})=>Ye(Qe(e),{logger:e.logger}),Qe=(e={})=>{let t=!1;const{logger:n,profile:o}=e,{timeout:r,maxRetries:s}=k(e),i=async(a,c)=>{if(t||c.headers?.[ee]==null){let d=!1,u=!1;const tt=await D({environmentVariableSelector:E=>{const S=E[x];if(u=!!S&&S!=="false",S===void 0)throw new f(`${x} not set in env, checking config file next.`,{logger:e.logger});return u},configFileSelector:E=>{const S=E[q];return d=!!S&&S!=="false",d},default:!1},{profile:o})();if(e.ec2MetadataV1Disabled||tt){const E=[];throw e.ec2MetadataV1Disabled&&E.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),d&&E.push(`config file profile (${q})`),u&&E.push(`process environment variable (${x})`),new P(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${E.join(", ")}].`)}}const m=(await N(async()=>{let d;try{d=await qe(c)}catch(u){throw u.statusCode===401&&(t=!1),u}return d},a)).trim();return N(async()=>{let d;try{d=await et(m,c,e)}catch(u){throw u.statusCode===401&&(t=!1),u}return d},a)};return async()=>{const a=await J();if(t)return n?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),i(s,{...a,timeout:r});{let c;try{c=(await Ze({...a,timeout:r})).toString()}catch(l){if(l?.statusCode===400)throw Object.assign(l,{message:"EC2 Metadata token request returned error"});return(l.message==="TimeoutError"||[403,404,405].includes(l.statusCode))&&(t=!0),n?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),i(s,{...a,timeout:r})}return i(s,{...a,headers:{[ee]:c},timeout:r})}}},Ze=async e=>_({...e,path:ze,method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),qe=async e=>(await _({...e,path:Z})).toString(),et=async(e,t,n)=>{const o=JSON.parse((await _({...t,path:Z+e})).toString());if(!M(o))throw new f("Invalid response received from instance metadata service.",{logger:n.logger});return L(o)}}};
