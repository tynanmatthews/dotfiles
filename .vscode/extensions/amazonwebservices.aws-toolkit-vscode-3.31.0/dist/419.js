"use strict";exports.id=419,exports.ids=[419],exports.modules={15419:(y,d,s)=>{s.r(d),s.d(d,{fromProcess:()=>p});var l=s(63738),t=s(10889),x=s(35317),w=s(39023);const P=(r,e,n)=>{if(e.Version!==1)throw Error(`Profile ${r} credential_process did not return Version 1.`);if(e.AccessKeyId===void 0||e.SecretAccessKey===void 0)throw Error(`Profile ${r} credential_process returned invalid credentials.`);if(e.Expiration){const c=new Date;if(new Date(e.Expiration)<c)throw Error(`Profile ${r} credential_process returned expired credentials.`)}let o=e.AccountId;return!o&&n?.[r]?.aws_account_id&&(o=n[r].aws_account_id),{accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,...e.SessionToken&&{sessionToken:e.SessionToken},...e.Expiration&&{expiration:new Date(e.Expiration)},...e.CredentialScope&&{credentialScope:e.CredentialScope},...o&&{accountId:o}}},f=async(r,e,n)=>{const o=e[r];if(e[r]){const c=o.credential_process;if(c!==void 0){const u=(0,w.promisify)(x.exec);try{const{stdout:i}=await u(c);let a;try{a=JSON.parse(i.trim())}catch{throw Error(`Profile ${r} credential_process returned invalid JSON.`)}return P(r,a,e)}catch(i){throw new t.C1(i.message,{logger:n})}}else throw new t.C1(`Profile ${r} did not contain credential_process.`,{logger:n})}else throw new t.C1(`Profile ${r} could not be found in shared credentials file.`,{logger:n})},p=(r={})=>async()=>{r.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");const e=await(0,l.YU)(r);return f((0,l.Bz)(r),e,r.logger)}}};
