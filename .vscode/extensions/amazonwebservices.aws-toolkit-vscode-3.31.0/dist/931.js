"use strict";exports.id=931,exports.ids=[931],exports.modules={25931:(W,I,t)=>{t.d(I,{fromIni:()=>T});var f=t(82712),l=t(35406),d=t(8818);const v=(e,s,n)=>{const r={EcsContainer:async i=>{const{fromHttp:o}=await t.e(298).then(t.bind(t,26298)),{fromContainerMetadata:a}=await t.e(347).then(t.bind(t,69347));return n?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,l.cy)(o(i??{}),a(i))().then(u)},Ec2InstanceMetadata:async i=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:o}=await t.e(347).then(t.bind(t,69347));return async()=>o(i)().then(u)},Environment:async i=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:o}=await Promise.resolve().then(t.bind(t,80554));return async()=>o(i)().then(u)}};if(e in r)return r[e];throw new l.C1(`Unsupported credential source in profile ${s}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:n})},u=e=>(0,d.g)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),P=(e,{profile:s="default",logger:n}={})=>Boolean(e)&&typeof e=="object"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(m(e,{profile:s,logger:n})||R(e,{profile:s,logger:n})),m=(e,{profile:s,logger:n})=>{const r=typeof e.source_profile=="string"&&typeof e.credential_source>"u";return r&&n?.debug?.(`    ${s} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),r},R=(e,{profile:s,logger:n})=>{const r=typeof e.credential_source=="string"&&typeof e.source_profile>"u";return r&&n?.debug?.(`    ${s} isCredentialSourceProfile credential_source=${e.credential_source}`),r},h=async(e,s,n,r={})=>{n.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const i=s[e];if(!n.roleAssumer){const{getDefaultRoleAssumer:c}=await t.e(769).then(t.bind(t,58150));n.roleAssumer=c({...n.clientConfig,credentialProviderLogger:n.logger,parentClientConfig:n?.parentClientConfig},n.clientPlugins)}const{source_profile:o}=i;if(o&&o in r)throw new l.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,f.Bz)(n)}. Profiles visited: `+Object.keys(r).join(", "),{logger:n.logger});n.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${o?`source_profile=[${o}]`:`profile=[${e}]`}`);const a=o?S(o,s,n,{...r,[o]:!0},g(s[o]??{})):(await v(i.credential_source,e,n.logger)(n))();if(g(i))return a.then(c=>(0,d.g)(c,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{const c={RoleArn:i.role_arn,RoleSessionName:i.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:i.external_id,DurationSeconds:parseInt(i.duration_seconds||"3600",10)},{mfa_serial:y}=i;if(y){if(!n.mfaCodeProvider)throw new l.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:n.logger,tryNextLink:!1});c.SerialNumber=y,c.TokenCode=await n.mfaCodeProvider(y)}const F=await a;return n.roleAssumer(F,c).then($=>(0,d.g)($,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},g=e=>!e.role_arn&&!!e.credential_source,A=e=>Boolean(e)&&typeof e=="object"&&typeof e.credential_process=="string",O=async(e,s)=>t.e(207).then(t.bind(t,85207)).then(({fromProcess:n})=>n({...e,profile:s})().then(r=>(0,d.g)(r,"CREDENTIALS_PROFILE_PROCESS","v"))),L=async(e,s,n={})=>{const{fromSSO:r}=await t.e(725).then(t.bind(t,24725));return r({profile:e,logger:n.logger})().then(i=>s.sso_session?(0,d.g)(i,"CREDENTIALS_PROFILE_SSO","r"):(0,d.g)(i,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},w=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string"),C=e=>Boolean(e)&&typeof e=="object"&&typeof e.aws_access_key_id=="string"&&typeof e.aws_secret_access_key=="string"&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,E=async(e,s)=>{s?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");const n={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,d.g)(n,"CREDENTIALS_PROFILE","n")},D=e=>Boolean(e)&&typeof e=="object"&&typeof e.web_identity_token_file=="string"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,x=async(e,s)=>t.e(121).then(t.bind(t,9121)).then(({fromTokenFile:n})=>n({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:s.roleAssumerWithWebIdentity,logger:s.logger,parentClientConfig:s.parentClientConfig})().then(r=>(0,d.g)(r,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),S=async(e,s,n,r={},i=!1)=>{const o=s[e];if(Object.keys(r).length>0&&C(o))return E(o,n);if(i||P(o,{profile:e,logger:n.logger}))return h(e,s,n,r);if(C(o))return E(o,n);if(D(o))return x(o,n);if(A(o))return O(n,e);if(w(o))return await L(e,o,n);throw new l.C1(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:n.logger})},T=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const s=await(0,f.YU)(e);return S((0,f.Bz)(e),s,e)}}};
